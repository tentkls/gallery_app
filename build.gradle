import groovy.json.JsonSlurper

// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext {
        supportLibraryVersion = '27.1.1'
        compileSdkVersion = 27
    }
    repositories {
        mavenCentral()
        jcenter()
        google()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.1.1'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        google()
        jcenter()
    }
}

static def download(String address, File destination) throws IOException {
    destination.withOutputStream { out ->
        out << new URL(address).openStream()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

task loadFiles {
    doLast {
        def list = [
                ["Fashion", "http://lagadpankaj1992.xyz/govindlagad_hairstyles/json_fashion.json"],
                ["Festival mehndi designs", "http://lagadpankaj1992.xyz/govindlagad_hairstyles/json_mehndi.json"],
                ["Festival rangoli designs", "http://lagadpankaj1992.xyz/govindlagad_hairstyles/json_rangoli.json"],
                ["Festival wishes images", "http://lagadpankaj1992.xyz/govindlagad_hairstyles/json_festival_images.json"],
                ["Hindi shayari", "http://lagadpankaj1992.xyz/govindlagad_hairstyles/json_shayari.json"]]
        list.each { def pair ->
            def connection = new URL(pair[1]).openConnection()
            connection.with {
                doOutput = true
                requestMethod = 'POST'
//                outputStream.withWriter { writer ->
//                    writer << queryString
//                }
                def json = new JsonSlurper().parseText(content.text)
                def urls = json.heroes
                urls.each { url ->
                    def folder = new File("D:\\Apps\\Images\\" + pair[0] + "\\" + url.actress_name)
                    if (!folder.exists()) {
                        folder.mkdirs()
                    }

                    for (int i = 1; i < 1000; i++) {
                        def file = new File(folder, "" + i + ".jpg")
                        if (!file.exists()) {
                            try {
                                download(url.url_address + "(" + i + ").jpg", file)
                            } catch (IOException e) {
                                break
                            }
                        }
                    }
                }
            }
        }
    }
}

def deleteFolder(File folder) {
    File[] files = folder.listFiles()
    if (files != null) { //some JVMs return null for empty dirs
        for (File f : files) {
            if (f.isDirectory()) {
                deleteFolder(f)
            } else {
                f.delete()
            }
        }
    }
    folder.delete()
}

static def copyFileUsingStream(File source, File dest) throws IOException {
    InputStream is = null
    OutputStream os = null
    try {
        is = new FileInputStream(source)
        os = new FileOutputStream(dest)
        byte[] buffer = new byte[1024]
        int length
        while ((length = is.read(buffer)) > 0) {
            os.write(buffer, 0, length)
        }
    } finally {
        if (is != null) {
            is.close()
        }
        if (os != null) {
            os.close()
        }
    }
}

def execute(String[] command) {
    def out = new ByteArrayOutputStream()
    exec {
        commandLine command
        standardOutput = out
    }
    return out.toString().trim()
}





task preparePresets {
    doLast {
    }
}

